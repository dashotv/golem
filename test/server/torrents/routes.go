// This file is autogenerated by Golem
// Do NOT make modifications, they will be lost
package torrents

import (
	"github.com/gin-gonic/gin"

	"github.com/dashotv/golem/web"
	"github.com/dashotv/test/server"
)

type context struct {
	Server *server.Server
}

var local = &context{}

func Routes(s *server.Server) {
	local.Server = s
	r := s.Router.Group("/torrents")
	r.Get("/add", addHandler)
	r.Get("/destroy", destroyHandler)
	r.Get("/", indexHandler)
	r.Get("/stop", labelHandler)
	r.Get("/pause", pauseHandler)
	r.Get("/remove", removeHandler)
	r.Get("/resume", resumeHandler)
	r.Get("/start", startHandler)
	r.Get("/stop", stopHandler)
	r.Get("/want", wantHandler)
	r.Get("/wanted", wantedHandler)

}

func addHandler(c *gin.Context) {
	url := web.QueryString(c, "url")

	Add(url)
}

func destroyHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	Destroy(infohash)
}

func indexHandler(c *gin.Context) {

	Index()
}

func labelHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")
	label := web.QueryString(c, "label")

	Label(infohash, label)
}

func pauseHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	Pause(infohash)
}

func removeHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	Remove(infohash)
}

func resumeHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	Resume(infohash)
}

func startHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	Start(infohash)
}

func stopHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	Stop(infohash)
}

func wantHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")
	files := web.QueryString(c, "files")

	Want(infohash, files)
}

func wantedHandler(c *gin.Context) {
	infohash := web.QueryString(c, "infohash")

	Wanted(infohash)
}
