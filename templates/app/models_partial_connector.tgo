type Connector struct {
	Log *zap.SugaredLogger
    {{range .Models -}}
        {{ if .Model -}}
    {{.Camel}} *grimoire.Store[*{{.Camel}}]
        {{ end -}}
    {{end}}
}

func connection[T mgm.Model](name string) (*grimoire.Store[T], error) {
	s, err := app.Config.ConnectionFor(name)
	if err != nil {
		return nil, err
	}
	c, err := grimoire.New[T](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}
	return c, nil
}

func NewConnector(app *Application) (*Connector, error) {
    {{range .Models -}}{{ if .Model -}}
    {{.Name}}, err := connection[*{{.Camel}}]("{{.Name}}")
    if err != nil {
        return nil, err
    }
    {{ if .QueryDefaults }}{{.Name}}.SetQueryDefaults({{.QueryDefaultsString}}){{ end }}
    {{ if ne .IndexesDescriptor "" }}grimoire.CreateIndexes[*{{.Camel}}]({{.Name}}, &{{.Camel}}{}, "{{.IndexesDescriptor}}"){{ end }}
    grimoire.CreateIndexesFromTags[*{{.Camel}}]({{.Name}}, &{{.Camel}}{})
    {{ end }}
    {{end -}}
    c := &Connector{
        Log: app.Log.Named("db"),
        {{range .Models -}}
            {{ if .Model -}}
        {{.Camel}}: {{.Name}},
            {{ end -}}
        {{end}}
    }

    return c, nil
}
