package {{.Package}}

import (
	"fmt"

	"{{.Repo}}/app"
	"github.com/dashotv/grimoire"
)

var cfg *app.Config

type Connector struct {
    {{range .Models -}}
    {{.Camel}} *grimoire.Store[*{{.Camel}}]
    {{end}}
}

func NewConnector() (*Connector, error) {
    cfg = app.ConfigInstance()
    var s *app.Connection
    var err error

    {{range .Models -}}
    s, err = settingsFor("{{.Name}}")
    if err != nil {
        return nil, err
    }

    {{.Name}}, err := grimoire.New[*{{.Camel}}](s.URI, s.Database, s.Collection)
    if err != nil {
        return nil, err
    }

    {{end}}
    c := &Connector{
        {{range .Models -}}
        {{.Camel}}: {{.Name}},
        {{end}}
    }

    return c, nil
}

func settingsFor(name string) (*app.Connection, error) {
    if cfg.Connections["default"] == nil {
        return nil, fmt.Errorf("no connection configuration for %s", name)
    }

	if _, ok := cfg.Connections[name]; !ok {
		return cfg.Connections["default"], nil
	}

    s := cfg.Connections["default"]
    a := cfg.Connections[name]

    if a.URI != "" {
        s.URI = a.URI
    }
    if a.Database != "" {
        s.Database = a.Database
    }
    if a.Collection != "" {
        s.Collection = a.Collection
    }

    return s, nil
}
