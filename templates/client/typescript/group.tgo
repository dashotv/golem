// Code generated by github.com/dashotv/golem. DO NOT EDIT.
{{- $group := .Group }}
import { 
  {{.Config.Name}}Client,
  {{- range $i, $import := $group.TypescriptImports }}{{ $import }}, {{ end }}
} from '.';
{{- range $i, $package := $group.TypescriptPackages }}
import * as {{$package}} from './{{$package}}';
{{- end }}
{{ $name := .Config.Name -}}

{{ range $r, $route := $group.CombinedRoutes -}}
{{ if $route.HasParams }}
export interface {{$group.Camel}}{{$route.Camel}}Request {
  {{- range $p, $param := $route.Params }}
  {{$param.Name}}: {{$param.TypescriptType}};
  {{- end }}
}
{{- end }}
{{ if ne $route.Result "" -}}
export interface {{$group.Camel}}{{$route.Camel}}Response extends Response {
  result: {{$route.TypescriptResult}};{{ if $route.Index }}
  total: number;
  {{- end }}
}
{{- end }}
export const {{ $group.Camel }}{{ $route.Camel }} = async ({{if $route.HasParams }}params: {{$group.Camel}}{{$route.Camel}}Request{{end}}) => {
  const response = await {{$name}}Client.{{$route.TypescriptMethod}}(`{{$group.Path}}{{$route.TypescriptPath}}?{{$route.QueryString}}`{{ if $route.HasModel }}, params.{{ $route.GetModel.Name }}{{end}});
  
  if (!response.data) {
    throw new Error("response empty?");
  }
  
  if (response.data.error) {
    if (response.data.message) {
      throw new Error(response.data.message);
    }
    throw new Error("unknown error");
  }

  return response.data as {{ if ne $route.Result "" }}{{$group.Camel}}{{$route.Camel}}Response{{else}}Response{{end}};
};
{{ end -}}
