// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/pkg/errors"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

{{$group := .Group -}}
type {{$group.Camel}}Service struct {
	client *Client
}

// New{{$group.Camel}} makes a new client for accessing {{$group.Camel}} services.
func New{{$group.Camel}}Service(client *Client) *{{$group.Camel}}Service {
	return &{{$group.Camel}}Service{
		client: client,
	}
}

{{range $r, $route := $group.CombinedRoutes -}}
{{if $route.HasParams }}
type {{$group.Camel}}{{$route.Camel}}Request struct {
	{{range $p, $param := $route.Params -}}
	{{$param.Camel}} {{$param.Type}} `json:"{{$param.Name}}"`
	{{end}}
}
{{ end }}
{{ if ne $route.Result "" }}
type {{$group.Camel}}{{$route.Camel}}Response struct {
	*Response
	Result {{$route.Result}} `json:"result"`
}
{{end}}
func (s *{{$group.Camel}}Service) {{$route.Camel}}(ctx context.Context{{if $route.HasParams }}, req *{{$group.Camel}}{{$route.Camel}}Request{{end}}) (*{{ if ne $route.Result "" }}{{$group.Camel}}{{$route.Camel}}Response{{else}}Response{{end}}, error) {
  result := &{{ if ne $route.Result "" }}{{$group.Camel}}{{$route.Camel}}Response{{else}}Response{{end}}{}
  resp, err := s.client.Resty.R().
    SetContext(ctx).
{{if $route.HasParams }}
    SetBody(req).
{{ end }}
    SetResult(result).
    Post(fmt.Sprintf("{{$group.Path}}{{$route.Path}}"))
  if err != nil {
    return nil, errors.Wrap(err, "failed to make request")
  }
  if !resp.IsSuccess() {
    return nil, errors.Errorf("%d: %v", resp.StatusCode(), resp.String())
  }
  if result.Error {
		return nil, errors.New(result.Message)
	}

  return result, nil
}
{{end}}
