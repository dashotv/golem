package {{.Package}}

import (
{{.Imports}}
)

type {{.Name}} struct {
    Document `bson:",inline"` // include mgm.DefaultModel
    //ID        primitive.ObjectID `json:"_id" bson:"_id,omitempty"`
    //CreatedAt time.Time          `json:"created_at" bson:"created_at"`
    //UpdatedAt time.Time          `json:"updated_at" bson:"updated_at"`
{{.Fields}}
}

func New{{.Name}}() *{{.Name}} {
    return &{{.Name}}{}
}

type {{.Name}}Store struct {
    Client *mongo.Client
    Database *mongo.Database
    Collection *mgm.Collection
}

func New{{.Name}}Store(URI, db, name string) (*{{.Name}}Store, error) {
    client, err := mgm.NewClient(CustomClientOptions(URI))
    if err != nil {
        return nil, err
    }

    database := client.Database(db)
    collection := mgm.NewCollection(database, name)

    store := &{{.Name}}Store{
        Client: client,
        Database: database,
        Collection: collection,
    }

    return store, nil
}

func (s *{{.Name}}Store) FindByID(id primitive.ObjectID) (*{{.Name}}, error) {
    c := New{{.Name}}()
    err := s.Collection.FindByID(id, c)
    if err != nil {
        return nil, err
    }

    return c, nil
}

func (s *{{.Name}}Store) Find(id string) (*{{.Name}}, error) {
    oid, err := primitive.ObjectIDFromHex(id)
    if err != nil {
        return nil, err
    }
    return s.FindByID(oid)
}

func (s *{{.Name}}Store) Save(o *{{.Name}}) error {
    // TODO: if id is nil create otherwise, call update
    return s.Collection.Create(o)
}

func (s *{{.Name}}Store) Update(o *{{.Name}}) error {
    return s.Collection.Update(o)
}

func (s *{{.Name}}Store) Delete(o *{{.Name}}) error {
    return s.Collection.Delete(o)
}

func (s *{{.Name}}Store) Query() *{{.Name}}Query {
    values := make(bson.M)
    return &{{.Name}}Query{
        store: s,
        values: values,
        limit: 25,
        skip: 0,
		sort:   bson.D{},
    }
}

type {{.Name}}Query struct {
    store *{{.Name}}Store
    values bson.M
    limit int64
    skip int64
	sort   bson.D
}

func (q *{{.Name}}Query) addSort(field string, value int) *{{.Name}}Query {
	q.sort = append(q.sort, bson.E{Key: field, Value: value})
	return q
}

func (q *{{.Name}}Query) Asc(field string) *{{.Name}}Query {
	return q.addSort(field, 1)
}

func (q *{{.Name}}Query) Desc(field string) *{{.Name}}Query {
	return q.addSort(field, -1)
}

func (q *{{.Name}}Query) Limit(limit int) *{{.Name}}Query {
    q.limit = int64(limit)
    return q
}

func (q *{{.Name}}Query) Skip(skip int) *{{.Name}}Query  {
    q.skip = int64(skip)
    return q
}

func (q *{{.Name}}Query) options() *options.FindOptions {
    o := &options.FindOptions{}
    o.SetLimit(q.limit)
    o.SetSkip(q.skip)
    o.SetSort(q.sort)
    return o
}

func (q *{{.Name}}Query) Run() ([]{{.Name}}, error) {
    result := make([]{{.Name}}, 0)
    err := q.store.Collection.SimpleFind(&result, q.values, q.options())
    if err != nil {
        return nil, err
    }

    return result, nil
}

func (q *{{.Name}}Query) Where(key string, value interface{}) *{{.Name}}Query {
    q.values[key] = bson.M{operator.Eq: value}
    return q
}

func (q *{{.Name}}Query) In(key string, value interface{}) *{{.Name}}Query {
    q.values[key] = bson.M{operator.In: value}
    return q
}

func (q *{{.Name}}Query) NotIn(key string, value interface{}) *{{.Name}}Query {
    q.values[key] = bson.M{operator.Nin: value}
    return q
}

func (q *{{.Name}}Query) NotEqual(key string, value interface{}) *{{.Name}}Query {
    q.values[key] = bson.M{operator.Ne: value}
    return q
}

func (q *{{.Name}}Query) LessThan(key string, value interface{}) *{{.Name}}Query {
    q.values[key] = bson.M{operator.Lt: value}
    return q
}

func (q *{{.Name}}Query) LessThanEqual(key string, value interface{}) *{{.Name}}Query {
    q.values[key] = bson.M{operator.Lte: value}
    return q
}

func (q *{{.Name}}Query) GreaterThan(key string, value interface{}) *{{.Name}}Query {
    q.values[key] = bson.M{operator.Gt: value}
    return q
}

func (q *{{.Name}}Query) GreaterThanEqual(key string, value interface{}) *{{.Name}}Query {
    q.values[key] = bson.M{operator.Gte: value}
    return q
}
